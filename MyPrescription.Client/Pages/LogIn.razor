@page "/"
@page "/login"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime
@inject MyPrescriptionClient client

<PageTitle>Log In</PageTitle>
<h3>Log In</h3>

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        There was an error when trying to login
    </div>
}

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-row col-md-10">
        <ValidationMessage For="@(() => model.Email)" />
        <InputText id="email" class="form-control margin-input" @bind-Value="model.Email" placeholder="Email" />
    </div>
    <div class="form-row col-md-10">
        <ValidationMessage For="@(() => model.Password)" />
        <InputText type="password" id="password" class="form-control margin-input" @bind-Value="model.Password" placeholder="Password" />
    </div>
    <div class="form-row col-md-10">
        <ValidationMessage For="@(() => model.TwoFACode)" />
        <InputText type="text" id="2fa" class="form-control margin-input" @bind-Value="model.TwoFACode" placeholder="2FA Code" />
    </div>
    <div class="row">
        <div class="btn-group col-md-12 text-right">
            <button type="submit" class="btn btn-primary">Log In</button>
            <NavLink class="btn btn-secondary" href="/signin">Sign In</NavLink>
        </div>
    </div>
</EditForm>

@code {
    private AuthenticationUser model = new();
    private bool showAuthenticationError = false;
    private Dictionary<string, string> routes = new()
{
        { "doctor", "/mypatients" },
        { "patient", "/myprescriptions" },
        { "pharmacist", "/findprescription" },
    };

    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        try
        {
            await AuthService.LoginAsync(model);
            var state = await authStateProvider.GetAuthenticationStateAsync();
            await RoleBaseNavigateTo(state);
        }
        catch (HttpRequestException)
        {
            showAuthenticationError = true;
        }
    }

    private async Task RoleBaseNavigateTo(AuthenticationState state)
    {
        var role = state.User.GetRoles().FirstOrDefault();
        if (string.IsNullOrEmpty(role))
            return;
        if (!routes.ContainsKey(role))
            return;

        if (role == "patient")
        {
            await RequestSubscription();
        }
        NavManager.NavigateTo(routes[role]);
    }

    private async Task RequestSubscription()
    {
        try
        {
            var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription", client.GetNotificationPublicKeyUrl());
            if (subscription != null)
            {
                try
                {
                    var response = await client.NotificationSubscribe(subscription);
                    response.EnsureSuccessStatusCode();
                }
                catch (AccessTokenNotAvailableException ex)
                {
                    ex.Redirect();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error registering subscription for notifications");
            Console.WriteLine("If you are in incognito mode, notifications are not supported");
            Console.WriteLine("If you view this page in Safari, notifications may not be supported");
            Console.WriteLine($"Error message: {e.Message}");
            Console.WriteLine($"Error stack trace: {e.StackTrace}");
        }
    }
}

