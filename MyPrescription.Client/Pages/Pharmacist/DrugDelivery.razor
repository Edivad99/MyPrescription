@page "/drugdelivery"
@inject MyPrescriptionClient client
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using ReactorBlazorQRCodeScanner
@attribute [Authorize(Roles = "pharmacist")]

@if (showDrugDeliveryError)
{
    <div class="alert alert-danger" role="alert">
        The code entered is not valid
    </div>
}

@if (drugDelivered)
{
    <div>
        <PageTitle>Drug Delivered</PageTitle>
    </div>    
}

<PageTitle>Drug Delivery</PageTitle>
<h3>
    Enter the unique code or scan the qr code
</h3>

<EditForm Model="model" OnValidSubmit="ExecuteDrugDelivery" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-row col-md-10">
        <ValidationMessage For="@(() => model.Code)" />
        <InputText type="text" id="code" class="form-control margin-input" @bind-Value="model.Code" placeholder="Code" />
    </div>
    <div class="row">
        <div class="btn-group col-md-12 text-right">
            <button type="submit" class="btn btn-primary">Delivery the drug</button>
        </div>
    </div>
</EditForm>

<div style="margin-top: 2em">
    <div style="text-align: center">
        <button type="button" style="width: 50%" class="btn btn-primary" @onclick="@(() => OpenQrCodeReader())">Scan the Qr Code</button>
    </div>
    <div style="text-align: center">
        <button type="button" style="width: 50%; margin-top: 1em" class="btn btn-primary" @onclick="@(() => StopQRScan())">Close the Qr Code Reader</button>
    </div>
    <QRCodeScanner ShowOutput="false" LoadingMessage=""/>
</div>

@code {
    private DrugDeliveryForm model = new();
    private bool showDrugDeliveryError = false;
    private bool drugDelivered = false;
    private string codeFromQrReader = "";

    private bool HideWarning = true;
    private string WarningMessage = "";

    private async Task ExecuteDrugDelivery()
    {
        showDrugDeliveryError = false;

        try
        {
            var response = await client.DrugDeliveryAsync(string.IsNullOrEmpty(codeFromQrReader) ? model.Code : codeFromQrReader);
            codeFromQrReader = "";
            if (!response.IsSuccessStatusCode) showDrugDeliveryError = true;
            else drugDelivered = true;
        }
        catch (HttpRequestException)
        {
            showDrugDeliveryError = true;    
        }

    }

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;

    protected async Task OpenQrCodeReader()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);

        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
        await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
    }

    private async void OnQrCodeScan(string code)
    {
        codeFromQrReader = code;
        await ExecuteDrugDelivery();
        StopQRScan();
    }

    protected async Task StopQRScan()
    {
        await _qrCodeScannerJsInterop.StopRecording();
    }
}

