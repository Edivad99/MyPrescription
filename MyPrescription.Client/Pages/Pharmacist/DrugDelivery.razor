@page "/drugdelivery"
@using ReactorBlazorQRCodeScanner
@inject MyPrescriptionClient client
@inject NavigationManager NavManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "pharmacist")]

@if (showDrugDeliveryError)
{
    <div class="alert alert-danger" role="alert">
        The code entered is not valid
    </div>
}

@if (drugDelivered && prescription is not null)
{
    <PageTitle>Drug Delivery</PageTitle>
    <h3>The unique code or the QR code is valid</h3>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Drug name</th>
                    <th>Creation Date</th>
                    <th>Is free?</th>
                    <th>Prescription code</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                    <tr>
                        <td>@prescription.DrugName</td>
                        <td>@prescription.CreationDate.ToString()</td>
                        <td>@(prescription.IsFree ? "Yes" : "No")</td>
                    </tr>
            </tbody>
        </table>
    </div>
}

<PageTitle>Drug Delivery</PageTitle>
<h3>Enter the unique code or scan the QR code</h3>

<EditForm Model="model" OnValidSubmit="ExecuteDrugDelivery" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-row col-md-10">
        <ValidationMessage For="@(() => model.Code)" />
        <label for="code">Enter the code manually or scan the QR code</label>
        <InputText type="text" id="code" class="form-control margin-input" @bind-Value="model.Code" placeholder="Code" />
        @if (showOpenCodeReader)
        {
            <button type="button" class="btn btn-outline-primary" @onclick="OpenQrCodeReader">Scan the QR code</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-danger" @onclick="CloseQrCodeReader">Close the QR code reader</button>
        }
    </div>
    <div class="row" style="width:50%">
        <QRCodeScanner LoadingMessage="" />
    </div>
    <div class="row">
        <div class="btn-group col-md-12 text-right">
            <button type="submit" class="btn btn-primary">Delivery the drug</button>
        </div>
    </div>
</EditForm>

@code {
    private DrugDeliveryForm model = new();
    private PrescriptionExpandedDTO? prescription;
    private bool showDrugDeliveryError = false;
    private bool drugDelivered = false;

    private bool showOpenCodeReader = true;


    private async Task ExecuteDrugDelivery()
    {
        showDrugDeliveryError = drugDelivered = false;
        try
        {
            var response = await client.DrugDeliveryAsync(model.Code);
            if (!response.IsSuccessStatusCode)
                showDrugDeliveryError = true;
            else
            {
                drugDelivered = true;
                prescription = await client.GetPrescriptionByCodeAsync(model.Code);
            }
        }
        catch (HttpRequestException)
        {
            showDrugDeliveryError = true;
        }
    }

    private QRCodeScannerJsInterop? qrCodeScannerJsInterop;

    private async Task OpenQrCodeReader()
    {
        qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
        await qrCodeScannerJsInterop.Init(async code =>
        {
            model.Code = code;
            await CloseQrCodeReader();
            StateHasChanged();
        });
        showOpenCodeReader = false;
    }

    private async Task CloseQrCodeReader()
    {
        if (qrCodeScannerJsInterop is not null)
        {
            await qrCodeScannerJsInterop.StopRecording();
        }
        showOpenCodeReader = true;
    }
}
